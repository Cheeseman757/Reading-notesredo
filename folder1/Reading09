Reading 09
Why are forms so important in web development?
•	Forms are crucial in web development because they are the primary means through which users can interact with web applications, whether for logging in, registering, searching, or submitting information. They enable two-way communication between the user and the website, allowing for dynamic, interactive, and personalized web experiences.
When designing a form, what are some key things to keep in mind when it comes to user experience?
•	Ensure clarity by using descriptive labels and instructions.
•	Simplify the form by asking only for necessary information.
•	Group related information for better organization.
•	Provide feedback on input validation and submission status.
•	Make forms accessible to all users, including those using assistive technologies.
List 5 form elements and explain their importance.
1.	<input>: Allows users to enter data. Its versatility (text, password, checkbox, etc.) makes it fundamental for gathering user information.
2.	<textarea>: Provides a multi-line area for text input, useful for longer responses, such as comments or messages.
3.	<select>: Creates a dropdown list, enabling users to choose from multiple predefined options, saving space and simplifying forms.
4.	<button>: Initiates form submission or other interactive actions, crucial for user interaction.
5.	<label>: Provides identification for form elements, improving accessibility and usability by ensuring users know what each input field represents.
How would you describe events to a non-technical friend?
•	Events are like notifications that tell you something has happened on your web page, such as clicking a button, submitting a form, or moving your mouse over an image. Just like you respond to notifications in real life, your website can respond to these events to do something useful or fun.
When using the addEventListener() method, what 2 arguments will you need to provide?
•	The event type you want to listen for (e.g., 'click', 'mouseover').
•	The callback function that runs when the event occurs.
Describe the event object. Why is the target within the event object useful?
•	The event object is a special object that contains information about the event that occurred, including the element that triggered the event, the type of event, and other details. The target property within the event object is useful because it specifies the exact element that triggered the event, allowing for precise manipulation or data retrieval from that element.
What is the difference between event bubbling and event capturing?
•	Event bubbling and event capturing are two phases of how events propagate through the DOM. In event bubbling, the event starts from the target element and bubbles up to the document's root. In event capturing, the event starts from the root and goes down to the target element. By default, events use bubbling, but both can be used to control how event handlers are executed in the event flow.

